Для реализации тестов были использованы Java, Maven, JUnit4, Rest Assured.
ОС Win 10(x64)
IntelliJ IDEA Community Edition 2018.3.1 x64
Запуск программы из среды правой кнопкой мыши на test/java - "Run 'All Tests'"

Третье задание открыло для меня довольно большие просторы для вооброжения, вот только какого-то единого стиля тестирования
я так и не выбрала:
    Тесты класса NearestSettlementTests проверяют работоспособность метода 'Ближайший город' инструментами rest-assured.
    Классы NearestStationsTest? обрабатывают ответы на запросы к методу 'Список ближайших станций'.
    Для тестов классов NearestStationsTest? был выбран другой подход - получать json и обрабатывать его поля средствами org.json.
    В NearestStationsTest1 сначала получила ответ на запрос, который был выполнен до тестовых методов, а потом проверяю поля полученного JSONa.
    В NearestStationsTests каждый тестовый метод обрабатывает ответ на свой уникальный (по возможности) запрос.
Стоит отметить, что здесь, в отличие от реализации 5 задания, я пользовалась 5 версией JUnit, а не 4.
Кроме этого, я предпочла заранее создать классы-словари для каждого метода, чтобы не работать с 'чистыми' строками, а по возможности формировать их программно.
Это показалось мне хорошей идеей, тк большинство полей повторяются из метода в метод как для ответа, так и для запроса,
создать общий словарь наименований и классы-словари для методов, с таким же описанием отправляемых и ожидаемых параметров, как и в документации.
Это было бы хорошей практикой, если бы тестов было бы больше - предлагаемый средой автоподбор существенно ускоряет процесс написания тестов
по сравнению с ручным вводом строки. Единственное, вбивать эти строки - та ещё морока.



